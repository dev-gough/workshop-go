package components

templ Decks() {
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"/>
    @Header()
    <div class="flex justify-center min-h-screen">
        <div
            class="container max-w-2/3 flex flex-col border border-gray-300 rounded-lg p-6"
            hx-get="/api/flashcard/decks"
            hx-trigger="load"
            hx-swap="outerHTML"
        >
            <div class="flex justify-end mb-4">
                <button
                    id="createButton"
                    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2"
                    onclick="showCreateDeckForm()"
                >
                    Create
                </button>
                <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded" onclick="deleteSelectedDeck()">
                    Delete
                </button>
            </div>
            <script>
                let selectedDeck = null;
                const container = document.querySelector('.container');

                function fetchDecks() {
                    // clear container, but leave both buttons
                    container.innerHTML = container.children[0].outerHTML;
                    fetch('/api/flashcard/decks')
                        .then(response => response.json())
                        .then(decks => {
                            decks.forEach(deck => {
                                let deckHTML = `
                                    <div class="deck bg-gray-100 rounded-lg p-6 text-center mb-4 cursor-pointer flex justify-between items-center" id="${deck.id}" onclick="selectDeck(${deck.id})">
                                        <h3 class="text-lg font-semibold">Deck ${deck.id}: ${deck.name}</h3>
                                        <div class="flex space-x-2">
                                            <a href="/projects/flashcard/decks/${deck.id}/study">
                                                <button class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                                                    Study
                                                </button>
                                            </a>
                                            <button id="edit-button-${deck.id}" class="bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded hidden" onclick="window.location.href = '/projects/flashcard/edit/${deck.id}'">
                                                Edit Cards
                                            </button>
                                        </div>
                                    </div>
                                `;
                                container.innerHTML += deckHTML;
                            });
                        })
                        .catch(error => console.error('Error fetching decks:', error));
                }

                function selectDeck(deckId) {
                    const deck = document.getElementById(deckId);
                    const editButton = document.getElementById(`edit-button-${deckId}`); // Get the edit button

                    if (selectedDeck && selectedDeck.id === deckId.toString()) {
                        deck.classList.remove('bg-blue-200');
                        selectedDeck = null;
                        editButton.classList.add('hidden'); // Hide the edit button when deselecting
                    } else {
                        if (selectedDeck) {
                            selectedDeck.classList.remove('bg-blue-200');
                            const previousEditButton = document.getElementById(`edit-button-${selectedDeck.id}`);
                            if (previousEditButton) {
                                previousEditButton.classList.add('hidden'); // Hide previous button if it exists
                            }
                        }
                        deck.classList.add('bg-blue-200');
                        selectedDeck = deck;
                        editButton.classList.remove('hidden'); // Show the edit button when selecting
                    }
                }

                function showCreateDeckForm() {
                    // Check if the form already exists
                    if (document.getElementById('createDeckForm')) {
                        return; // Don't create another one
                    }

                    const createDeckForm = `
                        <div class="deck bg-gray-100 rounded-lg p-6 text-center mb-4" id="createDeckForm">
                            <input type="text" id="deckName" placeholder="Deck Name" class="border rounded-md p-2 mb-2" />
                            <button onclick="removeCreateDeckForm()" class="bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mr-2">
                                Cancel
                            </button>
                            <button id="btn-submit" onclick="handleCreateDeck()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                Submit
                            </button>
                        </div>
                    `;
                    container.innerHTML = createDeckForm + container.innerHTML;
                    document.getElementById('deckName').focus();
					document.getElementById('deckName').addEventListener('keydown', function(event) {
						if (event.key === 'Enter') {
							event.preventDefault(); // Prevent form submission if inside a form
							document.getElementById('btn-submit').click();
						}
					});
                }

                function removeCreateDeckForm() {
                    const form = document.getElementById('createDeckForm');
                    if (form) {
                        form.remove(); // Remove the form from the DOM
                    }
                }

                function handleCreateDeck() {
                    const deckName = document.getElementById('deckName').value;
                    if (!deckName) {
                        alert('Please enter a deck name');
                        return;
                    }
                    console.log('Creating deck:', deckName);

                    fetch('/api/flashcard/decks/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ name: deckName })
                    })
                        .then(response => response.json())
                        .then(deck => {
                            console.log('Deck created:', deck);
                            removeCreateDeckForm();
                            fetchDecks(); // Refresh the deck list
                        })
                        .catch(error => console.error('Error creating deck:', error));
                }

                function deleteSelectedDeck() {
                    if (selectedDeck) {
                        if (confirm(`Are you sure you want to delete deck ${selectedDeck.id}? This action cannot be undone.`)) {
                            fetch(`/api/flashcard/decks/${selectedDeck.id}`, {
                                method: 'DELETE'
                            })
                                .then(response => {
                                    if (response.ok) {
                                        // Delete was successful
                                        selectedDeck.remove(); // Remove the deck from the UI
                                        selectedDeck = null; // Reset the selectedDeck variable
                                    } else {
                                        alert("Error deleting deck.");
                                    }
                                })
                                .catch(error => console.error('Error:', error));
                        }
                    } else {
                        alert("Please select a deck to delete.");
                    }
                }

                // Initial trigger
                fetchDecks();
            </script>
            <style>
                .deck {
                    transition: background-color 0.3s ease; /* Smooth transition for visual feedback */
                }
            </style>
        </div>
    </div>
}

// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.680
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func EditDeck() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Header().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex justify-center min-h-screen\"><div class=\"container max-w-2/3 flex flex-col border border-gray-300 rounded-lg p-6\" hx-get=\"/api/flashcard/cards/{deck_id}\" hx-trigger=\"load\" hx-swap=\"outerHTML\"><div class=\"flex justify-end mb-4\"><button id=\"editButton\" class=\"hidden bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded mr-2\" onclick=\"showEditCardForm()\">Edit</button> <button id=\"createButton\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2\" onclick=\"showCreateCardForm()\">Create</button> <button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\" onclick=\"deleteSelectedCard()\">Delete</button></div><h2 class=\"text-2xl font-semibold mb-4\">Edit Cards</h2><script>\n                let selectedCard = null;\n                const container = document.querySelector('.container');\n                \n                // Extract deck_id from the current URL\n                const currentUrl = window.location.href;\n                const deckIdMatch = currentUrl.match(/\\/edit\\/(\\d+)/);\n                const deckId = deckIdMatch ? deckIdMatch[1] : null;\n\n                if (deckId) {\n                    // Update hx-get attribute with the extracted deck_id\n                    container.setAttribute('hx-get', `/api/flashcard/cards/${deckId}`);\n                } else {\n                    console.error('Deck ID not found in URL');\n                    // Optionally, handle this error (e.g., show a message to the user)\n                }\n\n                function fetchCards() {\n                    container.innerHTML = container.children[0].outerHTML + container.children[1].outerHTML + container.children[2].outerHTML; // Keep the heading and buttons\n                    fetch(`/api/flashcard/cards/${deckId}`)\n                        .then(response => response.json())\n                        .then(cards => {\n                            cards.forEach(card => {\n                                let cardHTML = `\n                                    <div class=\"card bg-gray-100 rounded-lg p-6 mb-4 cursor-pointer\" id=\"card-${card.id}\" onclick=\"selectCard(${card.id})\">\n                                        <p>Front: ${card.front}</p>\n                                        <p>Back: ${card.back}</p>\n                                    </div>\n                                `;\n                                container.innerHTML += cardHTML;\n                            });\n                        })\n                        .catch(error => {\n                            console.error('Error fetching cards:', error);\n                        });\n                }\n\n                function selectCard(cardId) {\n                    const card = document.getElementById(`card-${cardId}`);\n                    const editButton = document.getElementById('editButton');\n\n                    if (selectedCard && selectedCard.id === `card-${cardId}`) {\n                        card.classList.remove('bg-blue-200');\n                        editButton.classList.add('hidden');\n                        selectedCard = null; // Deselect if clicking the same card\n                    } else {\n                        if (selectedCard) {\n                            selectedCard.classList.remove('bg-blue-200');\n                            editButton.classList.add('hidden');\n                        }\n                        card.classList.add('bg-blue-200');\n                        selectedCard = card;\n                        editButton.classList.remove('hidden');\n                    }\n                }\n\n                function showEditCardForm() {\n                    if (!selectedCard) return; // Do nothing if no card is selected\n\n                    // Remove existing createCardForm if present\n                    removeCreateCardForm();\n\n                    const cardId = parseInt(selectedCard.id.replace(\"card-\", \"\"));\n                    const front = selectedCard.querySelector('p:first-of-type').textContent.replace('Front: ', '');\n                    const back = selectedCard.querySelector('p:last-of-type').textContent.replace('Back: ', '');\n\n                    const editCardForm = `\n                        <div class=\"card bg-gray-100 rounded-lg p-6 mb-4\" id=\"createCardForm\">\n                            <input type=\"text\" id=\"cardFront\" placeholder=\"Front\" class=\"border rounded-md p-2 mb-2 w-full\" value=\"${front}\"/>\n                            <input type=\"text\" id=\"cardBack\" placeholder=\"Back\" class=\"border rounded-md p-2 mb-2 w-full\" value=\"${back}\"/>\n                            <button onclick=\"removeCreateCardForm()\" class=\"bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mr-2\">\n                                Cancel\n                            </button>\n                            <button id=\"btn-card-submit\" onclick=\"handleEditCard(${cardId})\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n                                Save\n                            </button>\n                        </div>\n                    `;\n                    container.innerHTML = editCardForm + container.innerHTML;\n                    document.getElementById('cardFront').focus();\n                    document.getElementById('createCardForm').addEventListener('keydown', function(event) {\n                        if (event.key === 'Enter') {\n                            event.preventDefault(); // Prevent form submission if inside a form\n                            document.getElementById('btn-card-submit').click();\n                        }\n                    });\n                }\n\n                async function handleEditCard(cardId) {\n                    const front = document.getElementById(\"cardFront\").value;\n                    const back = document.getElementById(\"cardBack\").value;\n\n                    // Basic validation (add more as needed)\n                    if (!front || !back) {\n                        alert(\"Please fill in both the front and back of the card.\");\n                        return;\n                    }\n\n                    const cardData = {\n                        id: cardId,\n                        front: front,\n                        back: back,\n                        recency: 0, // Placeholder for now\n                        prevdifficulty: 0 // Placeholder for now\n                    };\n\n                    try {\n                        const response = await fetch('/api/flashcard/cards', {\n                            method: 'PUT',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify(cardData)\n                        });\n\n                        if (!response.ok) {\n                            throw new Error(`HTTP error! Status: ${response.status}`);\n                        }\n\n                        const responseData = await response.json();\n                        console.log(responseData); // Log the response from the server (for debugging)\n\n                        // Update the UI to reflect the changes\n                        fetchCards(); // Or you could directly update the specific card element\n\n                        // Close the form (optional)\n                        removeCreateCardForm();\n                    } catch (error) {\n                        console.error('Error editing card:', error);\n                        // Handle the error appropriately (show a message to the user, etc.)\n                    }\n                }\n\n                function showCreateCardForm() {\n                    // Check if the form already exists\n                    if (document.getElementById('createCardForm')) {\n                        return; \n                    }\n\n                    const createCardForm = `\n                        <div class=\"card bg-gray-100 rounded-lg p-6 mb-4\" id=\"createCardForm\">\n                            <input type=\"text\" id=\"cardFront\" placeholder=\"Front\" class=\"border rounded-md p-2 mb-2 w-full\" />\n                            <input type=\"text\" id=\"cardBack\" placeholder=\"Back\" class=\"border rounded-md p-2 mb-2 w-full\" />\n                            <button onclick=\"removeCreateCardForm()\" class=\"bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mr-2\">\n                                Cancel\n                            </button>\n                            <button id=\"btn-card-submit\" onclick=\"handleCreateCard()\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n                                Submit\n                            </button>\n                        </div>\n                    `;\n                    container.innerHTML = createCardForm + container.innerHTML;\n                    document.getElementById('cardFront').focus();\n                    document.getElementById('createCardForm').addEventListener('keydown', function(event) {\n                        if (event.key === 'Enter') {\n                            event.preventDefault(); // Prevent form submission if inside a form\n                            document.getElementById('btn-card-submit').click();\n                        }\n                    });\n                }\n\n                function removeCreateCardForm() {\n                    const form = document.getElementById('createCardForm');\n                    if (form) {\n                        form.remove();\n                    }\n                }\n\n                async function handleCreateCard() {\n                    const front = document.getElementById(\"cardFront\").value;\n                    const back = document.getElementById(\"cardBack\").value;\n\n                    // Check if both fields are filled\n                    if (!front || !back) {\n                        alert(\"Please fill in both the front and back of the card.\");\n                        return;\n                    }\n\n                    const cardData = { front, back };\n\n                    try {\n                        const response = await fetch('/api/flashcard/cards', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify(cardData)\n                        });\n\n                        if (!response.ok) {\n                            throw new Error(`HTTP error! Status: ${response}`);\n                        }\n\n                        const responseData = await response.json();\n                        console.log(responseData); // Log the response from the server\n\n                        // Update the UI to reflect the new card (e.g., add it to the list of cards)\n                        fetchCards();\n\n                        // Clear the input fields\n                        document.getElementById(\"cardFront\").value = \"\";\n                        document.getElementById(\"cardBack\").value = \"\";\n\n                        // Close the form\n                        removeCreateCardForm();\n                    } catch (error) {\n                        console.error('Error creating card:', error);\n                        // Handle errors gracefully, perhaps display an error message to the user\n                    }\n                }\n\n                async function deleteSelectedCard() {\n                    if (!selectedCard) {\n                        alert(\"No card selected.\");\n                        return;\n                    }\n\n                    const confirmDelete = confirm(\"Are you sure you want to delete this card?\");\n                    if (!confirmDelete) {\n                        return;\n                    }\n\n                    const cardId = parseInt(selectedCard.id.replace(\"card-\", \"\"));\n\n                    try {\n                        const response = await fetch('/api/flashcard/cards', {\n                            method: 'DELETE',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify({ id: cardId })\n                        });\n\n                        if (!response.ok) {\n                            throw new Error(`HTTP error! Status: ${response.status}`);\n                        }\n\n                        const responseData = await response.json();\n                        console.log(responseData);\n\n                        // Update the UI to remove the deleted card\n                        selectedCard.remove();\n                        selectedCard = null;\n                        fetchCards(); // Refresh the card list in case of changes\n                    } catch (error) {\n                        console.error('Error deleting card:', error);\n                        // Handle errors gracefully, perhaps display an error message to the user\n                    }\n                }\n                fetchCards(); \n            </script><style>\n                .card {\n                    transition: background-color 0.3s ease;\n                }\n            </style></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.680
// package components

// templ EditDeck() {

//     <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"/>

//     @Header()

//     <div class="flex justify-center min-h-screen">

//         <div

//             class="container max-w-2/3 flex flex-col border border-gray-300 rounded-lg p-6"

//             hx-get="/api/flashcard/cards/{deck_id}"

//             hx-trigger="load"

//             hx-swap="outerHTML"

//         >

//             <h2 class="text-2xl font-semibold mb-4">Edit Cards</h2>

//             <script>

//                 let selectedCard = null;

//                 const container = document.querySelector('.container');

//                 // Extract deck_id from the current URL

//                 const currentUrl = window.location.href;

//                 const deckIdMatch = currentUrl.match(/\/edit\/(\d+)/);

//                 const deckId = deckIdMatch ? deckIdMatch[1] : null;

//                 if (deckId) {

//                     // Update hx-get attribute with the extracted deck_id

//                     container.setAttribute('hx-get', `/api/flashcard/cards/${deckId}`);

//                 } else {

//                     console.error('Deck ID not found in URL');

//                     // Optionally, handle this error (e.g., show a message to the user)

//                 }

//                 function fetchCards() {

//                     container.innerHTML = container.children[0].outerHTML; // Keep the heading

//                     fetch(`/api/flashcard/cards/${deckId}`)

//                         .then(response => response.json())

//                         .then(cards => {

//                             cards.forEach(card => {

//                                 let cardHTML = `

//                                     <div class="card bg-gray-100 rounded-lg p-6 mb-4 cursor-pointer" id="card-${card.id}" onclick="selectCard(${card.id})">

//                                         <p>Front: ${card.front}</p>

//                                         <p>Back: ${card.back}</p>

//                                     </div>

//                                 `;

//                                 container.innerHTML += cardHTML;

//                             });

//                         })

//                         .catch(error => {

//                             console.error('Error fetching cards:', error);

//                         });

//                 }

//                 function selectCard(cardId) {

//                     const card = document.getElementById(`card-${cardId}`);

//                     if (selectedCard && selectedCard.id === `card-${cardId}`) {

//                         card.classList.remove('bg-blue-200');

//                         selectedCard = null; // Deselect if clicking the same card

//                     } else {

//                         if (selectedCard) {

//                             selectedCard.classList.remove('bg-blue-200');

//                         }

//                         card.classList.add('bg-blue-200');

//                         selectedCard = card;

//                     }

//                 }

//                 fetchCards();

//             </script>

//             <style>

//                 .card {

//                     transition: background-color 0.3s ease; /* Smooth transition for visual feedback */

//                 }

//             </style>

//         </div>

//     </div>

// }

// package components

// templ EditDeck() {

//     <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"/>

//     @Header()

//     <div class="flex justify-center min-h-screen">

//         <div

//             class="container max-w-2/3 flex flex-col border border-gray-300 rounded-lg p-6"

//             hx-get="/api/flashcard/cards/{deck_id}"

//             hx-trigger="load"

//             hx-swap="outerHTML"

//         >

//             <div class="flex justify-end mb-4"> <button

//                     id="createButton"

//                     class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2"

//                     onclick="showCreateCardForm()"

//                 >

//                     Create Card

//                 </button>

//                 <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded" onclick="deleteSelectedCard()">

//                     Delete Card

//                 </button>

//             </div>

//             <script>

//                 let selectedCard = null;

//                 const container = document.querySelector('.container');

//                 // Extract deck_id from the current URL

//                 const currentUrl = window.location.href;

//                 const deckIdMatch = currentUrl.match(/\/edit\/(\d+)/);

//                 const deckId = deckIdMatch ? deckIdMatch[1] : null;

//                 if (deckId) {

//                     // Update hx-get attribute with the extracted deck_id

//                     container.setAttribute('hx-get', `/api/flashcard/cards/${deckId}`);

//                 } else {

//                     console.error('Deck ID not found in URL');

//                     // Optionally, handle this error (e.g., show a message to the user)

//                 }

//                 function fetchCards() {

//                     container.innerHTML = container.children[0].outerHTML; // Keep the heading & buttons

//                     fetch(`/api/flashcard/cards/${deckId}`)

//                         .then(response => response.json())

//                         .then(cards => {

//                             cards.forEach(card => {

//                                 let cardHTML = `

//                                     <div class="card bg-gray-100 rounded-lg p-6 mb-4 cursor-pointer" id="card-${card.id}" onclick="selectCard(${card.id})">

//                                         <p>Front: ${card.front}</p>

//                                         <p>Back: ${card.back}</p>

//                                     </div>

//                                 `;

//                                 container.innerHTML += cardHTML;

//                             });

//                         })

//                         .catch(error => {

//                             console.error('Error fetching cards:', error);

//                         });

//                 }

//                 function selectCard(cardId) {

//                     const card = document.getElementById(`card-${cardId}`);

//                     if (selectedCard && selectedCard.id === `card-${cardId}`) {

//                         card.classList.remove('bg-blue-200');

//                         selectedCard = null; // Deselect if clicking the same card

//                     } else {

//                         if (selectedCard) {

//                             selectedCard.classList.remove('bg-blue-200');

//                         }

//                         card.classList.add('bg-blue-200');

//                         selectedCard = card;

//                     }

//                 }

//                 function showCreateCardForm() {

//                     if (document.getElementById('createCardForm')) {

//                         return;

//                     }

//                     const createCardForm = `

//                         <div class="card bg-gray-100 rounded-lg p-6 mb-4" id="createCardForm">

//                             <input type="text" id="cardFront" placeholder="Front" class="border rounded-md p-2 mb-2 w-full" />

//                             <input type="text" id="cardBack" placeholder="Back" class="border rounded-md p-2 mb-2 w-full" />

//                             <button onclick="removeCreateCardForm()" class="bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mr-2">

//                                 Cancel

//                             </button>

//                             <button onclick="handleCreateCard()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">

//                                 Submit

//                             </button>

//                         </div>

//                     `;

//                     container.innerHTML = createCardForm + container.innerHTML; // Add form to the top

//                     document.getElementById('cardFront').focus();

//                 }

//                 function removeCreateCardForm() {

//                     const form = document.getElementById('createCardForm');

//                     if (form) {

//                         form.remove();

//                     }

//                 }

//                 fetchCards(); // Initial fetch

//             </script>

//             <style>

//                 .card {

//                     transition: background-color 0.3s ease; /* Smooth transition for visual feedback */

//                 }

//             </style>

//         </div>

//     </div>

// }

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func EditDeck() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Header().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex justify-center min-h-screen\"><div class=\"container max-w-2/3 flex flex-col border border-gray-300 rounded-lg p-6\" hx-get=\"/api/flashcard/cards/{deck_id}\" hx-trigger=\"load\" hx-swap=\"outerHTML\"><div class=\"flex justify-end mb-4\"><button id=\"createButton\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2\" onclick=\"showCreateCardForm()\">Create</button> <button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\" onclick=\"deleteSelectedCard()\">Delete</button></div><h2 class=\"text-2xl font-semibold mb-4\">Edit Cards</h2><script>\n                let selectedCard = null;\n                const container = document.querySelector('.container');\n                \n                // Extract deck_id from the current URL\n                const currentUrl = window.location.href;\n                const deckIdMatch = currentUrl.match(/\\/edit\\/(\\d+)/);\n                const deckId = deckIdMatch ? deckIdMatch[1] : null;\n\n                if (deckId) {\n                    // Update hx-get attribute with the extracted deck_id\n                    container.setAttribute('hx-get', `/api/flashcard/cards/${deckId}`);\n                } else {\n                    console.error('Deck ID not found in URL');\n                    // Optionally, handle this error (e.g., show a message to the user)\n                }\n\n                function fetchCards() {\n                    container.innerHTML = container.children[0].outerHTML + container.children[1].outerHTML; // Keep the heading and buttons\n                    fetch(`/api/flashcard/cards/${deckId}`)\n                        .then(response => response.json())\n                        .then(cards => {\n                            cards.forEach(card => {\n                                let cardHTML = `\n                                    <div class=\"card bg-gray-100 rounded-lg p-6 mb-4 cursor-pointer\" id=\"card-${card.id}\" onclick=\"selectCard(${card.id})\">\n                                        <p>Front: ${card.front}</p>\n                                        <p>Back: ${card.back}</p>\n                                    </div>\n                                `;\n                                container.innerHTML += cardHTML;\n                            });\n                        })\n                        .catch(error => {\n                            console.error('Error fetching cards:', error);\n                        });\n                }\n\n                function selectCard(cardId) {\n                    const card = document.getElementById(`card-${cardId}`);\n                    if (selectedCard && selectedCard.id === `card-${cardId}`) {\n                        card.classList.remove('bg-blue-200');\n                        selectedCard = null; // Deselect if clicking the same card\n                    } else {\n                        if (selectedCard) {\n                            selectedCard.classList.remove('bg-blue-200');\n                        }\n                        card.classList.add('bg-blue-200');\n                        selectedCard = card;\n                    }\n                }\n\n                function showCreateCardForm() {\n                    // Check if the form already exists\n                    if (document.getElementById('createCardForm')) {\n                        return; \n                    }\n\n                    const createCardForm = `\n                        <div class=\"card bg-gray-100 rounded-lg p-6 mb-4\" id=\"createCardForm\">\n                            <input type=\"text\" id=\"cardFront\" placeholder=\"Front\" class=\"border rounded-md p-2 mb-2 w-full\" />\n                            <input type=\"text\" id=\"cardBack\" placeholder=\"Back\" class=\"border rounded-md p-2 mb-2 w-full\" />\n                            <button onclick=\"removeCreateCardForm()\" class=\"bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mr-2\">\n                                Cancel\n                            </button>\n                            <button id=\"btn-card-submit\" onclick=\"handleCreateCard()\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n                                Submit\n                            </button>\n                        </div>\n                    `;\n                    container.innerHTML = createCardForm + container.innerHTML;\n                    document.getElementById('cardFront').focus();\n                    document.getElementById('cardFront').addEventListener('keydown', function(event) {\n                        if (event.key === 'Enter') {\n                            event.preventDefault(); // Prevent form submission if inside a form\n                            document.getElementById('btn-card-submit').click();\n                        }\n                    });\n                }\n\n                function removeCreateCardForm() {\n                    const form = document.getElementById('createCardForm');\n                    if (form) {\n                        form.remove();\n                    }\n                }\n\n                // You'll need to implement handleCreateCard() function to actually create the card\n                // in your backend and update the UI accordingly.\n\n                fetchCards(); \n            </script><style>\n                .card {\n                    transition: background-color 0.3s ease;\n                }\n            </style></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

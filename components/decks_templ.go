// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.680
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Decks() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Header().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex justify-center min-h-screen\"><div class=\"container max-w-2/3 flex flex-col border border-gray-300 rounded-lg p-6\" hx-get=\"/api/flashcard/decks\" hx-trigger=\"load\" hx-swap=\"outerHTML\"><div class=\"flex justify-end mb-4\"><button id=\"createButton\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2\" onclick=\"showCreateDeckForm()\">Create</button> <button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">Delete</button></div><script>\n                const container = document.querySelector('.container');\n\n                function fetchDecks() {\n                    // clear container, but leave both buttons\n                    container.innerHTML = container.children[0].outerHTML;\n                fetch('/api/flashcard/decks')\n                    .then(response => response.json())\n                    .then(decks => {\n                        console.log(decks);\n                        decks.forEach(deck => {\n                            let deckHTML = `\n                        <div class=\"deck bg-gray-100 rounded-lg p-6 text-center mb-4\" id=\"${deck.id}\">\n                            <h3 class=\"text-lg font-semibold\">Deck ${deck.id}: ${deck.name}</h3>\n                        </div>\n                    `;\n                            container.innerHTML += deckHTML; // Append the deck\n                        });\n                    })\n                    .catch(error => console.error('Error fetching decks:', error));\n            }\n\n                function showCreateDeckForm() {\n                    // Check if the form already exists\n                    if (document.getElementById('createDeckForm')) {\n                        return; // Don't create another one\n                    }\n\n                    const createDeckForm = `\n                        <div class=\"deck bg-gray-100 rounded-lg p-6 text-center mb-4\" id=\"createDeckForm\">\n                            <input type=\"text\" id=\"deckName\" placeholder=\"Deck Name\" class=\"border rounded-md p-2 mb-2\" />\n                            <button onclick=\"removeCreateDeckForm()\" class=\"bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mr-2\">\n                                Cancel\n                            </button>\n                            <button onclick=\"handleCreateDeck()\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n                                Submit\n                            </button>\n                        </div>\n                    `;\n                    container.innerHTML = createDeckForm + container.innerHTML;\n                    document.getElementById('deckName').focus();\n                }\n\n                function removeCreateDeckForm() {\n                    const form = document.getElementById('createDeckForm');\n                    if (form) {\n                        form.remove(); // Remove the form from the DOM\n                    }\n                }\n\n                function handleCreateDeck() {\n                    const deckName = document.getElementById('deckName').value;\n                    if (!deckName) {\n                        alert('Please enter a deck name');\n                        return;\n                    }\n                    console.log('Creating deck:', deckName);\n\n                    fetch('/api/flashcard/createdeck', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({ name: deckName })\n                    })\n                        .then(response => response.json())\n                        .then(deck => {\n                            console.log('Deck created:', deck);\n                            removeCreateDeckForm();\n                            fetchDecks(); // Refresh the deck list\n                        })\n                        .catch(error => console.error('Error creating deck:', error));\n                }\n\n                // Initial trigger\n                fetchDecks();\n            </script></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

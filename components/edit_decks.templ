package components

templ EditDeck() {
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"/>
    @Header()
    <div class="flex justify-center min-h-screen">
        <div 
            class="container max-w-2/3 flex flex-col border border-gray-300 rounded-lg p-6"
            hx-get="/api/flashcard/cards/{deck_id}" 
            hx-trigger="load"
            hx-swap="outerHTML"
        >
            <div class="flex justify-end mb-4">
                <button
                    id="editButton"
                    class="hidden bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded mr-2"
                    onclick="showEditCardForm()"
                >
                    Edit
                </button>
                <button
                    id="createButton"
                    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2"
                    onclick="showCreateCardForm()"
                >
                    Create
                </button>
                <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded" onclick="deleteSelectedCard()">
                    Delete
                </button>
            </div>

            <h2 class="text-2xl font-semibold mb-4">Edit Cards</h2>
            
            <script>
                let selectedCard = null;
                const container = document.querySelector('.container');
                
                // Extract deck_id from the current URL
                const currentUrl = window.location.href;
                const deckIdMatch = currentUrl.match(/\/edit\/(\d+)/);
                const deckId = deckIdMatch ? deckIdMatch[1] : null;

                if (deckId) {
                    // Update hx-get attribute with the extracted deck_id
                    container.setAttribute('hx-get', `/api/flashcard/cards/${deckId}`);
                } else {
                    console.error('Deck ID not found in URL');
                    // Optionally, handle this error (e.g., show a message to the user)
                }

                function fetchCards() {
                    container.innerHTML = container.children[0].outerHTML + container.children[1].outerHTML + container.children[2].outerHTML; // Keep the heading and buttons
                    fetch(`/api/flashcard/cards/${deckId}`)
                        .then(response => response.json())
                        .then(cards => {
                            cards.forEach(card => {
                                let cardHTML = `
                                    <div class="card bg-gray-100 rounded-lg p-6 mb-4 cursor-pointer" id="card-${card.id}" onclick="selectCard(${card.id})">
                                        <p>Front: ${card.front}</p>
                                        <p>Back: ${card.back}</p>
                                    </div>
                                `;
                                container.innerHTML += cardHTML;
                            });
                        })
                        .catch(error => {
                            console.error('Error fetching cards:', error);
                        });
                }

                function selectCard(cardId) {
                    const card = document.getElementById(`card-${cardId}`);
                    const editButton = document.getElementById('editButton');

                    if (selectedCard && selectedCard.id === `card-${cardId}`) {
                        card.classList.remove('bg-blue-200');
                        editButton.classList.add('hidden');
                        selectedCard = null; // Deselect if clicking the same card
                    } else {
                        if (selectedCard) {
                            selectedCard.classList.remove('bg-blue-200');
                            editButton.classList.add('hidden');
                        }
                        card.classList.add('bg-blue-200');
                        selectedCard = card;
                        editButton.classList.remove('hidden');
                    }
                }

                function showEditCardForm() {
                    if (!selectedCard) return; // Do nothing if no card is selected

                    // Remove existing createCardForm if present
                    removeCreateCardForm();

                    const cardId = parseInt(selectedCard.id.replace("card-", ""));
                    const front = selectedCard.querySelector('p:first-of-type').textContent.replace('Front: ', '');
                    const back = selectedCard.querySelector('p:last-of-type').textContent.replace('Back: ', '');

                    const editCardForm = `
                        <div class="card bg-gray-100 rounded-lg p-6 mb-4" id="createCardForm">
                            <input type="text" id="cardFront" placeholder="Front" class="border rounded-md p-2 mb-2 w-full" value="${front}"/>
                            <input type="text" id="cardBack" placeholder="Back" class="border rounded-md p-2 mb-2 w-full" value="${back}"/>
                            <button onclick="removeCreateCardForm()" class="bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mr-2">
                                Cancel
                            </button>
                            <button id="btn-card-submit" onclick="handleEditCard(${cardId})" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                Save
                            </button>
                        </div>
                    `;
                    container.innerHTML = editCardForm + container.innerHTML;
                    document.getElementById('cardFront').focus();
                    document.getElementById('createCardForm').addEventListener('keydown', function(event) {
                        if (event.key === 'Enter') {
                            event.preventDefault(); // Prevent form submission if inside a form
                            document.getElementById('btn-card-submit').click();
                        }
                    });
                }

                async function handleEditCard(cardId) {
                    const front = document.getElementById("cardFront").value;
                    const back = document.getElementById("cardBack").value;

                    // Basic validation (add more as needed)
                    if (!front || !back) {
                        alert("Please fill in both the front and back of the card.");
                        return;
                    }

                    const cardData = {
                        id: cardId,
                        front: front,
                        back: back,
                        recency: 0, // Placeholder for now
                        prevdifficulty: 0 // Placeholder for now
                    };

                    try {
                        const response = await fetch('/api/flashcard/cards', {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(cardData)
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }

                        const responseData = await response.json();
                        console.log(responseData); // Log the response from the server (for debugging)

                        // Update the UI to reflect the changes
                        fetchCards(); // Or you could directly update the specific card element

                        // Close the form (optional)
                        removeCreateCardForm();
                    } catch (error) {
                        console.error('Error editing card:', error);
                        // Handle the error appropriately (show a message to the user, etc.)
                    }
                }

                function showCreateCardForm() {
                    // Check if the form already exists
                    if (document.getElementById('createCardForm')) {
                        return; 
                    }

                    const createCardForm = `
                        <div class="card bg-gray-100 rounded-lg p-6 mb-4" id="createCardForm">
                            <input type="text" id="cardFront" placeholder="Front" class="border rounded-md p-2 mb-2 w-full" />
                            <input type="text" id="cardBack" placeholder="Back" class="border rounded-md p-2 mb-2 w-full" />
                            <button onclick="removeCreateCardForm()" class="bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mr-2">
                                Cancel
                            </button>
                            <button id="btn-card-submit" onclick="handleCreateCard()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                Submit
                            </button>
                        </div>
                    `;
                    container.innerHTML = createCardForm + container.innerHTML;
                    document.getElementById('cardFront').focus();
                    document.getElementById('createCardForm').addEventListener('keydown', function(event) {
                        if (event.key === 'Enter') {
                            event.preventDefault(); // Prevent form submission if inside a form
                            document.getElementById('btn-card-submit').click();
                        }
                    });
                }

                function removeCreateCardForm() {
                    const form = document.getElementById('createCardForm');
                    if (form) {
                        form.remove();
                    }
                }

                async function handleCreateCard() {
                    const front = document.getElementById("cardFront").value;
                    const back = document.getElementById("cardBack").value;

                    // Check if both fields are filled
                    if (!front || !back) {
                        alert("Please fill in both the front and back of the card.");
                        return;
                    }

                    const cardData = { front, back };

                    try {
                        const response = await fetch('/api/flashcard/cards', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(cardData)
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response}`);
                        }

                        const responseData = await response.json();
                        console.log(responseData); // Log the response from the server

                        // Update the UI to reflect the new card (e.g., add it to the list of cards)
                        fetchCards();

                        // Clear the input fields
                        document.getElementById("cardFront").value = "";
                        document.getElementById("cardBack").value = "";

                        // Close the form
                        removeCreateCardForm();
                    } catch (error) {
                        console.error('Error creating card:', error);
                        // Handle errors gracefully, perhaps display an error message to the user
                    }
                }

                async function deleteSelectedCard() {
                    if (!selectedCard) {
                        alert("No card selected.");
                        return;
                    }

                    const confirmDelete = confirm("Are you sure you want to delete this card?");
                    if (!confirmDelete) {
                        return;
                    }

                    const cardId = parseInt(selectedCard.id.replace("card-", ""));

                    try {
                        const response = await fetch('/api/flashcard/cards', {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ id: cardId })
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }

                        const responseData = await response.json();
                        console.log(responseData);

                        // Update the UI to remove the deleted card
                        selectedCard.remove();
                        selectedCard = null;
                        fetchCards(); // Refresh the card list in case of changes
                    } catch (error) {
                        console.error('Error deleting card:', error);
                        // Handle errors gracefully, perhaps display an error message to the user
                    }
                }
                fetchCards(); 
            </script>

            <style>
                .card {
                    transition: background-color 0.3s ease;
                }
            </style>
        </div>
    </div>
}